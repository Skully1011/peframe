# build with `docker build -t peframe -f Docker/PeframeDockerfile .` from Project directory
# run using `docker run -i -t --name="peframe" -v /path/to/malware:/peframe/peframe/Malware --rm peframe bash`

# get base ubuntu (bionic; 18.04) image
FROM ubuntu

# do these separately so they can be cached as separate steps; when rebuilding image: if python stuff
# fails this will be saved and prevent having to upgrade during every build
RUN apt update ;
# RUN apt upgrade -y

# utilities for working in the container
RUN apt install -y vim
RUN apt install -y git
# Clone peframe git repo early to avoid future layer rebuilding
RUN git clone https://github.com/Skully1011/peframe.git
#RUN cp ../peframe/ ./peframe/

# download and install peframe and dependencies
# requires python >= 3.6.6
RUN apt install -y python3 
RUN apt install -y python3-pip
RUN apt install -y python3-setuptools
RUN python3 -m pip install --upgrade pip setuptools
RUN apt install -y libssl-dev 
RUN apt install -y libmagic-dev
# peframe python dependencies
RUN python3 -m pip install swig
RUN python3 -m pip install python-magic
# now actually install peframe

WORKDIR /peframe/
RUN python3 setup.py install
USER root
RUN chmod +x /peframe/install.sh
RUN /peframe/install.sh

# COPY ./requirements.txt .
# RUN python3 -m pip install -r ./requirements.txt

# copy in files last to prevent rebuilding update and installation layers when the
# source code and config files are updated

# generate requirements.txt for documentation purposes
# NOTE when adding new packages to the container the requirements should be extracted to use for pip installation
# `docker cp peframe:/peframe/requirements.txt ./Requirements/Peframe`
RUN python3 -m pip freeze > requirements.txt
# set working (default) directory for the container
WORKDIR /peframe/peframe
# add peframe to the system path
RUN PATH=$PATH:/peframe/peframe/
RUN export PATH
# Create malware directory for mounting a volume/bind mount to
RUN mkdir ./Malware
RUN mkdir ./Malware/Analysis
# add script for automatic analysis of malware samples
ADD ../peframe/auto_analyze.py /peframe/peframe/
CMD python3 auto_analyze.py
# Create a volume from the command line with `docker volume create <volume_name>`

